"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkCliWrapper = void 0;
const commands_1 = require("./commands");
const utils_1 = require("./utils");
/**
 * Provides a programmatic interface for interacting with the CDK CLI by
 * wrapping the CLI with exec
 */
class CdkCliWrapper {
    constructor(options) {
        this.directory = options.directory;
        this.env = options.env;
        this.showOutput = options.showOutput ?? false;
        try {
            this.cdk = options.cdkExecutable ?? 'cdk';
        }
        catch {
            throw new Error(`could not resolve path to cdk executable: "${options.cdkExecutable ?? 'cdk'}"`);
        }
    }
    validateArgs(options) {
        if (!options.stacks && !options.all) {
            throw new Error('one of "app" or "stacks" must be provided');
        }
    }
    list(options) {
        const listCommandArgs = [
            ...renderBooleanArg('long', options.long),
            ...this.createDefaultArguments(options),
        ];
        return (0, utils_1.exec)([this.cdk, 'ls', ...listCommandArgs], {
            cwd: this.directory,
            verbose: this.showOutput,
            env: this.env,
        });
    }
    /**
     * cdk deploy
     */
    deploy(options) {
        const deployCommandArgs = [
            ...renderBooleanArg('ci', options.ci),
            ...renderBooleanArg('execute', options.execute),
            ...renderBooleanArg('exclusively', options.exclusively),
            ...renderBooleanArg('force', options.force),
            ...renderBooleanArg('previous-parameters', options.usePreviousParameters),
            ...renderBooleanArg('rollback', options.rollback),
            ...renderBooleanArg('staging', options.staging),
            ...options.reuseAssets ? renderArrayArg('--reuse-assets', options.reuseAssets) : [],
            ...options.notificationArns ? renderArrayArg('--notification-arns', options.notificationArns) : [],
            ...options.parameters ? renderMapArrayArg('--parameters', options.parameters) : [],
            ...options.outputsFile ? ['--outputs-file', options.outputsFile] : [],
            ...options.requireApproval ? ['--require-approval', options.requireApproval] : [],
            ...options.changeSetName ? ['--change-set-name', options.changeSetName] : [],
            ...options.toolkitStackName ? ['--toolkit-stack-name', options.toolkitStackName] : [],
            ...options.progress ? ['--progress', options.progress] : ['--progress', commands_1.StackActivityProgress.EVENTS],
            ...options.deploymentMethod ? ['--method', options.deploymentMethod] : [],
            ...options.concurrency ? ['--concurrency', options.concurrency.toString()] : [],
            ...this.createDefaultArguments(options),
        ];
        (0, utils_1.exec)([this.cdk, 'deploy', ...deployCommandArgs], {
            cwd: this.directory,
            verbose: this.showOutput,
            env: this.env,
        });
    }
    watch(options) {
        let hotswap;
        switch (options.hotswap) {
            case commands_1.HotswapMode.FALL_BACK:
                hotswap = '--hotswap-fallback';
                break;
            case commands_1.HotswapMode.HOTSWAP_ONLY:
                hotswap = '--hotswap';
                break;
            default:
                hotswap = '--hotswap-fallback';
                break;
        }
        const deployCommandArgs = [
            '--watch',
            ...renderBooleanArg('ci', options.ci),
            ...renderBooleanArg('execute', options.execute),
            ...renderBooleanArg('exclusively', options.exclusively),
            ...renderBooleanArg('force', options.force),
            ...renderBooleanArg('previous-parameters', options.usePreviousParameters),
            ...renderBooleanArg('rollback', options.rollback),
            ...renderBooleanArg('staging', options.staging),
            ...renderBooleanArg('logs', options.traceLogs),
            hotswap,
            ...options.reuseAssets ? renderArrayArg('--reuse-assets', options.reuseAssets) : [],
            ...options.notificationArns ? renderArrayArg('--notification-arns', options.notificationArns) : [],
            ...options.parameters ? renderMapArrayArg('--parameters', options.parameters) : [],
            ...options.outputsFile ? ['--outputs-file', options.outputsFile] : [],
            ...options.requireApproval ? ['--require-approval', options.requireApproval] : [],
            ...options.changeSetName ? ['--change-set-name', options.changeSetName] : [],
            ...options.toolkitStackName ? ['--toolkit-stack-name', options.toolkitStackName] : [],
            ...options.progress ? ['--progress', options.progress] : ['--progress', commands_1.StackActivityProgress.EVENTS],
            ...options.deploymentMethod ? ['--method', options.deploymentMethod] : [],
            ...this.createDefaultArguments(options),
        ];
        return (0, utils_1.watch)([this.cdk, 'deploy', ...deployCommandArgs], {
            cwd: this.directory,
            verbose: this.showOutput,
            env: this.env,
        });
    }
    /**
     * cdk destroy
     */
    destroy(options) {
        const destroyCommandArgs = [
            ...renderBooleanArg('force', options.force),
            ...renderBooleanArg('exclusively', options.exclusively),
            ...this.createDefaultArguments(options),
        ];
        (0, utils_1.exec)([this.cdk, 'destroy', ...destroyCommandArgs], {
            cwd: this.directory,
            verbose: this.showOutput,
            env: this.env,
        });
    }
    /**
     * cdk synth
     */
    synth(options) {
        const synthCommandArgs = [
            ...renderBooleanArg('validation', options.validation),
            ...renderBooleanArg('quiet', options.quiet),
            ...renderBooleanArg('exclusively', options.exclusively),
            ...this.createDefaultArguments(options),
        ];
        (0, utils_1.exec)([this.cdk, 'synth', ...synthCommandArgs], {
            cwd: this.directory,
            verbose: this.showOutput,
            env: this.env,
        });
    }
    /**
     * Do a CDK synth, mimicking the CLI (without actually using it)
     *
     * The CLI has a pretty slow startup time because of all the modules it needs to load,
     * Bypass it to be quicker!
     */
    synthFast(options) {
        (0, utils_1.exec)(options.execCmd, {
            cwd: this.directory,
            verbose: this.showOutput,
            env: {
                CDK_CONTEXT_JSON: JSON.stringify(options.context),
                CDK_OUTDIR: options.output,
                ...this.env,
                ...options.env,
            },
        });
    }
    createDefaultArguments(options) {
        this.validateArgs(options);
        const stacks = options.stacks ?? [];
        return [
            ...options.app ? ['--app', options.app] : [],
            ...renderBooleanArg('strict', options.strict),
            ...renderBooleanArg('trace', options.trace),
            ...renderBooleanArg('lookups', options.lookups),
            ...renderBooleanArg('ignore-errors', options.ignoreErrors),
            ...renderBooleanArg('json', options.json),
            ...renderBooleanArg('verbose', options.verbose),
            ...renderBooleanArg('debug', options.debug),
            ...renderBooleanArg('ec2creds', options.ec2Creds),
            ...renderBooleanArg('version-reporting', options.versionReporting),
            ...renderBooleanArg('path-metadata', options.pathMetadata),
            ...renderBooleanArg('asset-metadata', options.assetMetadata),
            ...renderBooleanArg('notices', options.notices),
            ...renderBooleanArg('color', options.color),
            ...options.context ? renderMapArrayArg('--context', options.context) : [],
            ...options.profile ? ['--profile', options.profile] : [],
            ...options.proxy ? ['--proxy', options.proxy] : [],
            ...options.caBundlePath ? ['--ca-bundle-path', options.caBundlePath] : [],
            ...options.roleArn ? ['--role-arn', options.roleArn] : [],
            ...options.output ? ['--output', options.output] : [],
            ...stacks,
            ...options.all ? ['--all'] : [],
        ];
    }
}
exports.CdkCliWrapper = CdkCliWrapper;
function renderMapArrayArg(flag, parameters) {
    const params = [];
    for (const [key, value] of Object.entries(parameters)) {
        params.push(`${key}=${value}`);
    }
    return renderArrayArg(flag, params);
}
function renderArrayArg(flag, values) {
    let args = [];
    for (const value of values ?? []) {
        args.push(flag, value);
    }
    return args;
}
function renderBooleanArg(val, arg) {
    if (arg) {
        return [`--${val}`];
    }
    else if (arg === undefined) {
        return [];
    }
    else {
        return [`--no-${val}`];
    }
}
//# sourceMappingURL=data:application/json;base64,