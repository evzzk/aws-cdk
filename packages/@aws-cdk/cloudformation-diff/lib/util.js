"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeComparator = makeComparator;
exports.dropIfEmpty = dropIfEmpty;
exports.deepRemoveUndefined = deepRemoveUndefined;
exports.flatMap = flatMap;
/**
 * Turn a (multi-key) extraction function into a comparator for use in Array.sort()
 */
function makeComparator(keyFn) {
    return (a, b) => {
        const keyA = keyFn(a);
        const keyB = keyFn(b);
        const len = Math.min(keyA.length, keyB.length);
        for (let i = 0; i < len; i++) {
            const c = compare(keyA[i], keyB[i]);
            if (c !== 0) {
                return c;
            }
        }
        // Arrays are the same up to the min length -- shorter array sorts first
        return keyA.length - keyB.length;
    };
}
function compare(a, b) {
    if (a < b) {
        return -1;
    }
    if (b < a) {
        return 1;
    }
    return 0;
}
function dropIfEmpty(xs) {
    return xs.length > 0 ? xs : undefined;
}
function deepRemoveUndefined(x) {
    if (typeof x === undefined || x === null) {
        return x;
    }
    if (Array.isArray(x)) {
        return x.map(deepRemoveUndefined);
    }
    if (typeof x === 'object') {
        for (const [key, value] of Object.entries(x)) {
            x[key] = deepRemoveUndefined(value);
            if (x[key] === undefined) {
                delete x[key];
            }
        }
        return x;
    }
    return x;
}
function flatMap(xs, f) {
    const ret = new Array();
    for (const x of xs) {
        ret.push(...f(x));
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx3Q0FjQztBQVFELGtDQUVDO0FBRUQsa0RBV0M7QUFFRCwwQkFNQztBQWhERDs7R0FFRztBQUNILFNBQWdCLGNBQWMsQ0FBTyxLQUFvQjtJQUN2RCxPQUFPLENBQUMsQ0FBSSxFQUFFLENBQUksRUFBRSxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDN0IsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFBQyxPQUFPLENBQUMsQ0FBQztZQUFDLENBQUM7UUFDNUIsQ0FBQztRQUVELHdFQUF3RTtRQUN4RSxPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUksQ0FBSSxFQUFFLENBQUk7SUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUN4QixPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxTQUFnQixXQUFXLENBQUksRUFBTztJQUNwQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsQ0FBTTtJQUN4QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFBQyxPQUFPLENBQUMsQ0FBQztJQUFDLENBQUM7SUFDdkQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUFDLENBQUM7SUFDNUQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUMxQixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFDLENBQUM7UUFDOUMsQ0FBQztRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELFNBQWdCLE9BQU8sQ0FBTyxFQUFPLEVBQUUsQ0FBZ0I7SUFDckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUssQ0FBQztJQUMzQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUdXJuIGEgKG11bHRpLWtleSkgZXh0cmFjdGlvbiBmdW5jdGlvbiBpbnRvIGEgY29tcGFyYXRvciBmb3IgdXNlIGluIEFycmF5LnNvcnQoKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUNvbXBhcmF0b3I8VCwgVT4oa2V5Rm46ICh4OiBUKSA9PiBVW10pIHtcbiAgcmV0dXJuIChhOiBULCBiOiBUKSA9PiB7XG4gICAgY29uc3Qga2V5QSA9IGtleUZuKGEpO1xuICAgIGNvbnN0IGtleUIgPSBrZXlGbihiKTtcbiAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihrZXlBLmxlbmd0aCwga2V5Qi5sZW5ndGgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYyA9IGNvbXBhcmUoa2V5QVtpXSwga2V5QltpXSk7XG4gICAgICBpZiAoYyAhPT0gMCkgeyByZXR1cm4gYzsgfVxuICAgIH1cblxuICAgIC8vIEFycmF5cyBhcmUgdGhlIHNhbWUgdXAgdG8gdGhlIG1pbiBsZW5ndGggLS0gc2hvcnRlciBhcnJheSBzb3J0cyBmaXJzdFxuICAgIHJldHVybiBrZXlBLmxlbmd0aCAtIGtleUIubGVuZ3RoO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wYXJlPFQ+KGE6IFQsIGI6IFQpIHtcbiAgaWYgKGEgPCBiKSB7IHJldHVybiAtMTsgfVxuICBpZiAoYiA8IGEpIHsgcmV0dXJuIDE7IH1cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcm9wSWZFbXB0eTxUPih4czogVFtdKTogVFtdIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHhzLmxlbmd0aCA+IDAgPyB4cyA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBSZW1vdmVVbmRlZmluZWQoeDogYW55KTogYW55IHtcbiAgaWYgKHR5cGVvZiB4ID09PSB1bmRlZmluZWQgfHwgeCA9PT0gbnVsbCkgeyByZXR1cm4geDsgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh4KSkgeyByZXR1cm4geC5tYXAoZGVlcFJlbW92ZVVuZGVmaW5lZCk7IH1cbiAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHgpKSB7XG4gICAgICB4W2tleV0gPSBkZWVwUmVtb3ZlVW5kZWZpbmVkKHZhbHVlKTtcbiAgICAgIGlmICh4W2tleV0gPT09IHVuZGVmaW5lZCkgeyBkZWxldGUgeFtrZXldOyB9XG4gICAgfVxuICAgIHJldHVybiB4O1xuICB9XG4gIHJldHVybiB4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1hcDxULCBVPih4czogVFtdLCBmOiAoeDogVCkgPT4gVVtdKTogVVtdIHtcbiAgY29uc3QgcmV0ID0gbmV3IEFycmF5PFU+KCk7XG4gIGZvciAoY29uc3QgeCBvZiB4cykge1xuICAgIHJldC5wdXNoKC4uLmYoeCkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iXX0=