"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticReason = void 0;
exports.printSummary = printSummary;
exports.formatAssertionResults = formatAssertionResults;
exports.printResults = printResults;
exports.printLaggards = printLaggards;
const util_1 = require("util");
const chalk = require("chalk");
const logger = require("../logger");
/**
 * Represents possible reasons for a diagnostic
 */
var DiagnosticReason;
(function (DiagnosticReason) {
    /**
     * The integration test failed because there
     * is not existing snapshot
     */
    DiagnosticReason["NO_SNAPSHOT"] = "NO_SNAPSHOT";
    /**
     * The integration test failed
     */
    DiagnosticReason["TEST_FAILED"] = "TEST_FAILED";
    /**
     * There was an error running the integration test
     */
    DiagnosticReason["TEST_ERROR"] = "TEST_ERROR";
    /**
     * The snapshot test failed because the actual
     * snapshot was different than the expected snapshot
     */
    DiagnosticReason["SNAPSHOT_FAILED"] = "SNAPSHOT_FAILED";
    /**
     * The snapshot test failed because there was an error executing it
     */
    DiagnosticReason["SNAPSHOT_ERROR"] = "SNAPSHOT_ERROR";
    /**
     * The snapshot test succeeded
     */
    DiagnosticReason["SNAPSHOT_SUCCESS"] = "SNAPSHOT_SUCCESS";
    /**
     * The integration test succeeded
     */
    DiagnosticReason["TEST_SUCCESS"] = "TEST_SUCCESS";
    /**
     * The assertion failed
     */
    DiagnosticReason["ASSERTION_FAILED"] = "ASSERTION_FAILED";
})(DiagnosticReason || (exports.DiagnosticReason = DiagnosticReason = {}));
function printSummary(total, failed) {
    if (failed > 0) {
        logger.print('%s:    %s %s, %s total', chalk.bold('Tests'), chalk.red(failed), chalk.red('failed'), total);
    }
    else {
        logger.print('%s:    %s %s, %s total', chalk.bold('Tests'), chalk.green(total), chalk.green('passed'), total);
    }
}
/**
 * Format the assertion results so that the results can be
 * printed
 */
function formatAssertionResults(results) {
    return Object.entries(results)
        .map(([id, result]) => (0, util_1.format)('%s%s', id, result.status === 'success' ? ` - ${result.status}` : `\n${result.message}`))
        .join('\n      ');
}
/**
 * Print out the results from tests
 */
function printResults(diagnostic) {
    var _a;
    switch (diagnostic.reason) {
        case DiagnosticReason.SNAPSHOT_SUCCESS:
            logger.success('  UNCHANGED  %s %s', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`));
            break;
        case DiagnosticReason.TEST_SUCCESS:
            logger.success('  SUCCESS    %s %s\n      ', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`), diagnostic.message);
            break;
        case DiagnosticReason.NO_SNAPSHOT:
            logger.error('  NEW        %s %s', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`));
            break;
        case DiagnosticReason.SNAPSHOT_FAILED:
            logger.error('  CHANGED    %s %s\n      %s', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`), diagnostic.message);
            break;
        case DiagnosticReason.SNAPSHOT_ERROR:
        case DiagnosticReason.TEST_ERROR:
            logger.error('  ERROR      %s %s\n      %s', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`), diagnostic.message);
            break;
        case DiagnosticReason.TEST_FAILED:
            logger.error('  FAILED     %s %s\n      %s', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`), diagnostic.message);
            break;
        case DiagnosticReason.ASSERTION_FAILED:
            logger.error('  ASSERT     %s %s\n      %s', diagnostic.testName, chalk.gray(`${diagnostic.duration}s`), diagnostic.message);
            break;
    }
    for (const addl of (_a = diagnostic.additionalMessages) !== null && _a !== void 0 ? _a : []) {
        logger.print(`      ${addl}`);
    }
}
function printLaggards(testNames) {
    const parts = [
        '  ',
        `Waiting for ${testNames.size} more`,
        testNames.size < 10 ? ['(', Array.from(testNames).join(', '), ')'].join('') : '',
    ];
    logger.print(chalk.grey(parts.filter(x => x).join(' ')));
}
//# sourceMappingURL=data:application/json;base64,