"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockfs = require("mock-fs");
const integration_tests_1 = require("../../lib/runner/integration-tests");
describe('IntegrationTests Discovery', () => {
    const tests = new integration_tests_1.IntegrationTests('test');
    let stderrMock;
    stderrMock = jest.spyOn(process.stderr, 'write').mockImplementation(() => { return true; });
    beforeEach(() => {
        mockfs({
            'test/test-data': {
                'integ.test1.js': 'javascript',
                'integ.test2.js': 'javascript',
                'integ.test3.js': 'javascript',
                'integration.test.js': 'javascript-no-match',
                'integ.test1.ts': 'typescript',
                'integ.test2.ts': 'typescript',
                'integ.test3.ts': 'typescript',
                'integ.test3.d.ts': 'typescript-no-match',
                'integration.test.ts': 'typescript-no-match',
                'integ_test1.py': 'python',
                'integ_test2.py': 'python',
                'integ_test3.py': 'python',
                'integ.integ-test.py': 'python-no-match',
            },
            'other/other-data': {
                'integ.other-test1.js': 'javascript',
                'integ.other-test1.ts': 'typescript',
                'integ_other-test1.py': 'python',
            },
        });
    });
    afterEach(() => {
        mockfs.restore();
        stderrMock.mockReset();
    });
    describe.each([
        ['javascript', 'js', 'integ.test1.js'],
        ['typescript', 'ts', 'integ.test1.ts'],
        ['python', 'py', 'integ_test1.py'],
    ])('%s', (language, fileExtension, namedTest) => {
        const cliOptions = {
            language: [language],
        };
        test('assert test inputs', () => {
            expect(namedTest).toContain('.' + fileExtension);
        });
        describe('from cli args', () => {
            test('find all', async () => {
                const integTests = await tests.fromCliOptions(cliOptions);
                expect(integTests.length).toEqual(3);
                expect(integTests[0].fileName).toEqual(expect.stringMatching(new RegExp(`^.*test1\\.${fileExtension}$`)));
                expect(integTests[1].fileName).toEqual(expect.stringMatching(new RegExp(`^.*test2\\.${fileExtension}$`)));
                expect(integTests[2].fileName).toEqual(expect.stringMatching(new RegExp(`^.*test3\\.${fileExtension}$`)));
            });
            test('find named tests', async () => {
                const integTests = await tests.fromCliOptions({ ...cliOptions, tests: [`test-data/${namedTest}`] });
                expect(integTests.length).toEqual(1);
                expect(integTests[0].fileName).toEqual(expect.stringMatching(namedTest));
            });
            test('test not found', async () => {
                const integTests = await tests.fromCliOptions({ ...cliOptions, tests: [`test-data/${namedTest}`.replace('test1', 'test42')] });
                expect(integTests.length).toEqual(0);
                expect(stderrMock.mock.calls[0][0].trim()).toMatch(new RegExp(`No such integ test: test-data\\/.*test42\\.${fileExtension}`));
                expect(stderrMock.mock.calls[1][0]).toMatch(new RegExp(`Available tests: test-data\\/.*test1\\.${fileExtension} test-data\\/.*test2\\.${fileExtension} test-data\\/.*test3\\.${fileExtension}`));
            });
            test('exclude tests', async () => {
                const integTests = await tests.fromCliOptions({ ...cliOptions, tests: [`test-data/${namedTest}`], exclude: true });
                const fileNames = integTests.map(test => test.fileName);
                expect(integTests.length).toEqual(2);
                expect(fileNames).not.toContain(`test/test-data/${namedTest}`);
            });
            test('match regex', async () => {
                const integTests = await tests.fromCliOptions({
                    language: [language],
                    testRegex: [`[12]\\.${fileExtension}$`],
                });
                expect(integTests.length).toEqual(2);
                expect(integTests[0].fileName).toEqual(expect.stringMatching(new RegExp(`1\\.${fileExtension}$`)));
                expect(integTests[1].fileName).toEqual(expect.stringMatching(new RegExp(`2\\.${fileExtension}$`)));
            });
            test('match regex with path', async () => {
                const otherTestDir = new integration_tests_1.IntegrationTests('.');
                const integTests = await otherTestDir.fromCliOptions({
                    language: [language],
                    testRegex: [`other-data/integ.*\\.${fileExtension}$`],
                });
                expect(integTests.length).toEqual(1);
                expect(integTests[0].fileName).toEqual(expect.stringMatching(new RegExp(`.*other-test1\\.${fileExtension}$`)));
            });
        });
    });
    describe('Same test file in JS and TS is only running JS', () => {
        const cliOptions = {
            language: ['javascript', 'typescript'],
        };
        test('find only JS files', async () => {
            const integTests = await tests.fromCliOptions(cliOptions);
            expect(integTests.length).toEqual(3);
            expect(integTests[0].fileName).toEqual(expect.stringMatching(new RegExp('^.*test1\\.js$')));
            expect(integTests[1].fileName).toEqual(expect.stringMatching(new RegExp('^.*test2\\.js$')));
            expect(integTests[2].fileName).toEqual(expect.stringMatching(new RegExp('^.*test3\\.js$')));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWdyYXRpb24tdGVzdHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVncmF0aW9uLXRlc3RzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQ0FBa0M7QUFDbEMsMEVBQXNFO0FBRXRFLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxvQ0FBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxJQUFJLFVBQTRCLENBQUM7SUFDakMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLENBQUM7WUFDTCxnQkFBZ0IsRUFBRTtnQkFDaEIsZ0JBQWdCLEVBQUUsWUFBWTtnQkFDOUIsZ0JBQWdCLEVBQUUsWUFBWTtnQkFDOUIsZ0JBQWdCLEVBQUUsWUFBWTtnQkFDOUIscUJBQXFCLEVBQUUscUJBQXFCO2dCQUU1QyxnQkFBZ0IsRUFBRSxZQUFZO2dCQUM5QixnQkFBZ0IsRUFBRSxZQUFZO2dCQUM5QixnQkFBZ0IsRUFBRSxZQUFZO2dCQUM5QixrQkFBa0IsRUFBRSxxQkFBcUI7Z0JBQ3pDLHFCQUFxQixFQUFFLHFCQUFxQjtnQkFFNUMsZ0JBQWdCLEVBQUUsUUFBUTtnQkFDMUIsZ0JBQWdCLEVBQUUsUUFBUTtnQkFDMUIsZ0JBQWdCLEVBQUUsUUFBUTtnQkFDMUIscUJBQXFCLEVBQUUsaUJBQWlCO2FBQ3pDO1lBQ0Qsa0JBQWtCLEVBQUU7Z0JBQ2xCLHNCQUFzQixFQUFFLFlBQVk7Z0JBQ3BDLHNCQUFzQixFQUFFLFlBQVk7Z0JBQ3BDLHNCQUFzQixFQUFFLFFBQVE7YUFDakM7U0FDRixDQUFDLENBQUM7SUFDTCxD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USxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtRQUM5RCxNQUFNLFVBQVUsR0FBRztZQUNqQixRQUFRLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDO1NBQ3ZDLENBQUM7UUFFRixJQUFJLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDcEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTFELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1vY2tmcyBmcm9tICdtb2NrLWZzJztcbmltcG9ydCB7IEludGVncmF0aW9uVGVzdHMgfSBmcm9tICcuLi8uLi9saWIvcnVubmVyL2ludGVncmF0aW9uLXRlc3RzJztcblxuZGVzY3JpYmUoJ0ludGVncmF0aW9uVGVzdHMgRGlzY292ZXJ5JywgKCkgPT4ge1xuICBjb25zdCB0ZXN0cyA9IG5ldyBJbnRlZ3JhdGlvblRlc3RzKCd0ZXN0Jyk7XG4gIGxldCBzdGRlcnJNb2NrOiBqZXN0LlNweUluc3RhbmNlO1xuICBzdGRlcnJNb2NrID0gamVzdC5zcHlPbihwcm9jZXNzLnN0ZGVyciwgJ3dyaXRlJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHsgcmV0dXJuIHRydWU7IH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tmcyh7XG4gICAgICAndGVzdC90ZXN0LWRhdGEnOiB7XG4gICAgICAgICdpbnRlZy50ZXN0MS5qcyc6ICdqYXZhc2NyaXB0JyxcbiAgICAgICAgJ2ludGVnLnRlc3QyLmpzJzogJ2phdmFzY3JpcHQnLFxuICAgICAgICAnaW50ZWcudGVzdDMuanMnOiAnamF2YXNjcmlwdCcsXG4gICAgICAgICdpbnRlZ3JhdGlvbi50ZXN0LmpzJzogJ2phdmFzY3JpcHQtbm8tbWF0Y2gnLFxuXG4gICAgICAgICdpbnRlZy50ZXN0MS50cyc6ICd0eXBlc2NyaXB0JyxcbiAgICAgICAgJ2ludGVnLnRlc3QyLnRzJzogJ3R5cGVzY3JpcHQnLFxuICAgICAgICAnaW50ZWcudGVzdDMudHMnOiAndHlwZXNjcmlwdCcsXG4gICAgICAgICdpbnRlZy50ZXN0My5kLnRzJzogJ3R5cGVzY3JpcHQtbm8tbWF0Y2gnLFxuICAgICAgICAnaW50ZWdyYXRpb24udGVzdC50cyc6ICd0eXBlc2NyaXB0LW5vLW1hdGNoJyxcblxuICAgICAgICAnaW50ZWdfdGVzdDEucHknOiAncHl0aG9uJyxcbiAgICAgICAgJ2ludGVnX3Rlc3QyLnB5JzogJ3B5dGhvbicsXG4gICAgICAgICdpbnRlZ190ZXN0My5weSc6ICdweXRob24nLFxuICAgICAgICAnaW50ZWcuaW50ZWctdGVzdC5weSc6ICdweXRob24tbm8tbWF0Y2gnLFxuICAgICAgfSxcbiAgICAgICdvdGhlci9vdGhlci1kYXRhJzoge1xuICAgICAgICAnaW50ZWcub3RoZXItdGVzdDEuanMnOiAnamF2YXNjcmlwdCcsXG4gICAgICAgICdpbnRlZy5vdGhlci10ZXN0MS50cyc6ICd0eXBlc2NyaXB0JyxcbiAgICAgICAgJ2ludGVnX290aGVyLXRlc3QxLnB5JzogJ3B5dGhvbicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIG1vY2tmcy5yZXN0b3JlKCk7XG4gICAgc3RkZXJyTW9jay5tb2NrUmVzZXQoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUuZWFjaChbXG4gICAgWydqYXZhc2NyaXB0JywgJ2pzJywgJ2ludGVnLnRlc3QxLmpzJ10sXG4gICAgWyd0eXBlc2NyaXB0JywgJ3RzJywgJ2ludGVnLnRlc3QxLnRzJ10sXG4gICAgWydweXRob24nLCAncHknLCAnaW50ZWdfdGVzdDEucHknXSxcbiAgXSkoJyVzJywgKGxhbmd1YWdlLCBmaWxlRXh0ZW5zaW9uLCBuYW1lZFRlc3QpID0+IHtcbiAgICBjb25zdCBjbGlPcHRpb25zID0ge1xuICAgICAgbGFuZ3VhZ2U6IFtsYW5ndWFnZV0sXG4gICAgfTtcblxuICAgIHRlc3QoJ2Fzc2VydCB0ZXN0IGlucHV0cycsICgpID0+IHtcbiAgICAgIGV4cGVjdChuYW1lZFRlc3QpLnRvQ29udGFpbignLicgKyBmaWxlRXh0ZW5zaW9uKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdmcm9tIGNsaSBhcmdzJywgKCkgPT4ge1xuICAgICAgdGVzdCgnZmluZCBhbGwnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGludGVnVGVzdHMgPSBhd2FpdCB0ZXN0cy5mcm9tQ2xpT3B0aW9ucyhjbGlPcHRpb25zKTtcblxuICAgICAgICBleHBlY3QoaW50ZWdUZXN0cy5sZW5ndGgpLnRvRXF1YWwoMyk7XG4gICAgICAgIGV4cGVjdChpbnRlZ1Rlc3RzWzBdLmZpbGVOYW1lKS50b0VxdWFsKGV4cGVjdC5zdHJpbmdNYXRjaGluZyhuZXcgUmVnRXhwKGBeLip0ZXN0MVxcXFwuJHtmaWxlRXh0ZW5zaW9ufSRgKSkpO1xuICAgICAgICBleHBlY3QoaW50ZWdUZXN0c1sxXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cChgXi4qdGVzdDJcXFxcLiR7ZmlsZUV4dGVuc2lvbn0kYCkpKTtcbiAgICAgICAgZXhwZWN0KGludGVnVGVzdHNbMl0uZmlsZU5hbWUpLnRvRXF1YWwoZXhwZWN0LnN0cmluZ01hdGNoaW5nKG5ldyBSZWdFeHAoYF4uKnRlc3QzXFxcXC4ke2ZpbGVFeHRlbnNpb259JGApKSk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZmluZCBuYW1lZCB0ZXN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaW50ZWdUZXN0cyA9IGF3YWl0IHRlc3RzLmZyb21DbGlPcHRpb25zKHsgLi4uY2xpT3B0aW9ucywgdGVzdHM6IFtgdGVzdC1kYXRhLyR7bmFtZWRUZXN0fWBdIH0pO1xuXG4gICAgICAgIGV4cGVjdChpbnRlZ1Rlc3RzLmxlbmd0aCkudG9FcXVhbCgxKTtcbiAgICAgICAgZXhwZWN0KGludGVnVGVzdHNbMF0uZmlsZU5hbWUpLnRvRXF1YWwoZXhwZWN0LnN0cmluZ01hdGNoaW5nKG5hbWVkVGVzdCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ3Rlc3Qgbm90IGZvdW5kJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnRlZ1Rlc3RzID0gYXdhaXQgdGVzdHMuZnJvbUNsaU9wdGlvbnMoeyAuLi5jbGlPcHRpb25zLCB0ZXN0czogW2B0ZXN0LWRhdGEvJHtuYW1lZFRlc3R9YC5yZXBsYWNlKCd0ZXN0MScsICd0ZXN0NDInKV0gfSk7XG5cbiAgICAgICAgZXhwZWN0KGludGVnVGVzdHMubGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICBleHBlY3Qoc3RkZXJyTW9jay5tb2NrLmNhbGxzWzBdWzBdLnRyaW0oKSkudG9NYXRjaChcbiAgICAgICAgICBuZXcgUmVnRXhwKGBObyBzdWNoIGludGVnIHRlc3Q6IHRlc3QtZGF0YVxcXFwvLip0ZXN0NDJcXFxcLiR7ZmlsZUV4dGVuc2lvbn1gKSxcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0KHN0ZGVyck1vY2subW9jay5jYWxsc1sxXVswXSkudG9NYXRjaChcbiAgICAgICAgICBuZXcgUmVnRXhwKGBBdmFpbGFibGUgdGVzdHM6IHRlc3QtZGF0YVxcXFwvLip0ZXN0MVxcXFwuJHtmaWxlRXh0ZW5zaW9ufSB0ZXN0LWRhdGFcXFxcLy4qdGVzdDJcXFxcLiR7ZmlsZUV4dGVuc2lvbn0gdGVzdC1kYXRhXFxcXC8uKnRlc3QzXFxcXC4ke2ZpbGVFeHRlbnNpb259YCksXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgdGVzdCgnZXhjbHVkZSB0ZXN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaW50ZWdUZXN0cyA9IGF3YWl0IHRlc3RzLmZyb21DbGlPcHRpb25zKHsgLi4uY2xpT3B0aW9ucywgdGVzdHM6IFtgdGVzdC1kYXRhLyR7bmFtZWRUZXN0fWBdLCBleGNsdWRlOiB0cnVlIH0pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lcyA9IGludGVnVGVzdHMubWFwKHRlc3QgPT4gdGVzdC5maWxlTmFtZSk7XG4gICAgICAgIGV4cGVjdChpbnRlZ1Rlc3RzLmxlbmd0aCkudG9FcXVhbCgyKTtcbiAgICAgICAgZXhwZWN0KGZpbGVOYW1lcykubm90LnRvQ29udGFpbihcbiAgICAgICAgICBgdGVzdC90ZXN0LWRhdGEvJHtuYW1lZFRlc3R9YCxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXN0KCdtYXRjaCByZWdleCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaW50ZWdUZXN0cyA9IGF3YWl0IHRlc3RzLmZyb21DbGlPcHRpb25zKHtcbiAgICAgICAgICBsYW5ndWFnZTogW2xhbmd1YWdlXSxcbiAgICAgICAgICB0ZXN0UmVnZXg6IFtgWzEyXVxcXFwuJHtmaWxlRXh0ZW5zaW9ufSRgXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KGludGVnVGVzdHMubGVuZ3RoKS50b0VxdWFsKDIpO1xuICAgICAgICBleHBlY3QoaW50ZWdUZXN0c1swXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cChgMVxcXFwuJHtmaWxlRXh0ZW5zaW9ufSRgKSkpO1xuICAgICAgICBleHBlY3QoaW50ZWdUZXN0c1sxXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cChgMlxcXFwuJHtmaWxlRXh0ZW5zaW9ufSRgKSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHRlc3QoJ21hdGNoIHJlZ2V4IHdpdGggcGF0aCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3RoZXJUZXN0RGlyID0gbmV3IEludGVncmF0aW9uVGVzdHMoJy4nKTtcbiAgICAgICAgY29uc3QgaW50ZWdUZXN0cyA9IGF3YWl0IG90aGVyVGVzdERpci5mcm9tQ2xpT3B0aW9ucyh7XG4gICAgICAgICAgbGFuZ3VhZ2U6IFtsYW5ndWFnZV0sXG4gICAgICAgICAgdGVzdFJlZ2V4OiBbYG90aGVyLWRhdGEvaW50ZWcuKlxcXFwuJHtmaWxlRXh0ZW5zaW9ufSRgXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KGludGVnVGVzdHMubGVuZ3RoKS50b0VxdWFsKDEpO1xuICAgICAgICBleHBlY3QoaW50ZWdUZXN0c1swXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cChgLipvdGhlci10ZXN0MVxcXFwuJHtmaWxlRXh0ZW5zaW9ufSRgKSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTYW1lIHRlc3QgZmlsZSBpbiBKUyBhbmQgVFMgaXMgb25seSBydW5uaW5nIEpTJywgKCkgPT4ge1xuICAgIGNvbnN0IGNsaU9wdGlvbnMgPSB7XG4gICAgICBsYW5ndWFnZTogWydqYXZhc2NyaXB0JywgJ3R5cGVzY3JpcHQnXSxcbiAgICB9O1xuXG4gICAgdGVzdCgnZmluZCBvbmx5IEpTIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaW50ZWdUZXN0cyA9IGF3YWl0IHRlc3RzLmZyb21DbGlPcHRpb25zKGNsaU9wdGlvbnMpO1xuXG4gICAgICBleHBlY3QoaW50ZWdUZXN0cy5sZW5ndGgpLnRvRXF1YWwoMyk7XG4gICAgICBleHBlY3QoaW50ZWdUZXN0c1swXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cCgnXi4qdGVzdDFcXFxcLmpzJCcpKSk7XG4gICAgICBleHBlY3QoaW50ZWdUZXN0c1sxXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cCgnXi4qdGVzdDJcXFxcLmpzJCcpKSk7XG4gICAgICBleHBlY3QoaW50ZWdUZXN0c1syXS5maWxlTmFtZSkudG9FcXVhbChleHBlY3Quc3RyaW5nTWF0Y2hpbmcobmV3IFJlZ0V4cCgnXi4qdGVzdDNcXFxcLmpzJCcpKSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=