"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const path = require("path");
const fs = require("fs-extra");
const extract_1 = require("../../lib/workers/extract");
beforeEach(() => {
    jest.spyOn(process.stderr, 'write').mockImplementation(() => { return true; });
    jest.spyOn(process.stdout, 'write').mockImplementation(() => { return true; });
    jest.spyOn(fs, 'moveSync').mockImplementation(() => { return true; });
    jest.spyOn(fs, 'removeSync').mockImplementation(() => { return true; });
    jest.spyOn(fs, 'writeFileSync').mockImplementation(() => { return true; });
});
afterEach(() => {
    jest.clearAllMocks();
    jest.resetAllMocks();
    jest.restoreAllMocks();
});
const directory = path.join(__dirname, '..', 'test-data');
describe('Snapshot tests', () => {
    test('no snapshot', () => {
        // WHEN
        const test = {
            fileName: path.join(directory, 'xxxxx.integ-test1.js'),
            discoveryRoot: directory,
        };
        const result = (0, extract_1.snapshotTestWorker)(test);
        // THEN
        expect(result.length).toEqual(1);
        expect(result[0]).toEqual(test);
    });
    test('has snapshot', () => {
        // WHEN
        jest.spyOn(child_process, 'spawnSync').mockResolvedValue;
        const test = {
            fileName: path.join(directory, 'xxxxx.test-with-snapshot.js'),
            discoveryRoot: directory,
        };
        const result = (0, extract_1.snapshotTestWorker)(test);
        // THEN
        expect(result.length).toEqual(1);
    });
    test('failed snapshot', () => {
        // WHEN
        jest.spyOn(child_process, 'spawnSync').mockRejectedValue;
        const test = {
            fileName: path.join(directory, 'xxxxx.test-with-snapshot-assets-diff.js'),
            discoveryRoot: directory,
            destructiveChanges: [],
        };
        const result = (0, extract_1.snapshotTestWorker)(test);
        // THEN
        expect(result.length).toEqual(1);
        expect(result[0]).toEqual(test);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3Qtd29ya2VyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzbmFwc2hvdC13b3JrZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUErQztBQUMvQyw2QkFBNkI7QUFDN0IsK0JBQStCO0FBQy9CLHVEQUErRDtBQUUvRCxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDLENBQUM7QUFDSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNyQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDMUQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtRQUN2QixPQUFPO1FBQ1AsTUFBTSxJQUFJLEdBQUc7WUFDWCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUM7WUFDdEQsYUFBYSxFQUFFLFNBQVM7U0FDekIsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLElBQUEsNEJBQWtCLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEMsT0FBTztRQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUN4QixPQUFPO1FBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsaUJBQWlCLENBQUM7UUFDekQsTUFBTSxJQUFJLEdBQUc7WUFDWCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsNkJBQTZCLENBQUM7WUFDN0QsYUFBYSxFQUFFLFNBQVM7U0FDekIsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLElBQUEsNEJBQWtCLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEMsT0FBTztRQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtRQUMzQixPQUFPO1FBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsaUJBQWlCLENBQUM7UUFDekQsTUFBTSxJQUFJLEdBQUc7WUFDWCxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUNBQXlDLENBQUM7WUFDekUsYUFBYSxFQUFFLFNBQVM7WUFDeEIsa0JBQWtCLEVBQUUsRUFBRTtTQUN2QixDQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBQSw0QkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxPQUFPO1FBQ1AsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBzbmFwc2hvdFRlc3RXb3JrZXIgfSBmcm9tICcuLi8uLi9saWIvd29ya2Vycy9leHRyYWN0JztcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGplc3Quc3B5T24ocHJvY2Vzcy5zdGRlcnIsICd3cml0ZScpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7IHJldHVybiB0cnVlOyB9KTtcbiAgamVzdC5zcHlPbihwcm9jZXNzLnN0ZG91dCwgJ3dyaXRlJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHsgcmV0dXJuIHRydWU7IH0pO1xuICBqZXN0LnNweU9uKGZzLCAnbW92ZVN5bmMnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4geyByZXR1cm4gdHJ1ZTsgfSk7XG4gIGplc3Quc3B5T24oZnMsICdyZW1vdmVTeW5jJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHsgcmV0dXJuIHRydWU7IH0pO1xuICBqZXN0LnNweU9uKGZzLCAnd3JpdGVGaWxlU3luYycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7IHJldHVybiB0cnVlOyB9KTtcbn0pO1xuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xufSk7XG5cbmNvbnN0IGRpcmVjdG9yeSA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICd0ZXN0LWRhdGEnKTtcbmRlc2NyaWJlKCdTbmFwc2hvdCB0ZXN0cycsICgpID0+IHtcbiAgdGVzdCgnbm8gc25hcHNob3QnLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHRlc3QgPSB7XG4gICAgICBmaWxlTmFtZTogcGF0aC5qb2luKGRpcmVjdG9yeSwgJ3h4eHh4LmludGVnLXRlc3QxLmpzJyksXG4gICAgICBkaXNjb3ZlcnlSb290OiBkaXJlY3RvcnksXG4gICAgfTtcbiAgICBjb25zdCByZXN1bHQgPSBzbmFwc2hvdFRlc3RXb3JrZXIodGVzdCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHJlc3VsdC5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgZXhwZWN0KHJlc3VsdFswXSkudG9FcXVhbCh0ZXN0KTtcbiAgfSk7XG5cbiAgdGVzdCgnaGFzIHNuYXBzaG90JywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBqZXN0LnNweU9uKGNoaWxkX3Byb2Nlc3MsICdzcGF3blN5bmMnKS5tb2NrUmVzb2x2ZWRWYWx1ZTtcbiAgICBjb25zdCB0ZXN0ID0ge1xuICAgICAgZmlsZU5hbWU6IHBhdGguam9pbihkaXJlY3RvcnksICd4eHh4eC50ZXN0LXdpdGgtc25hcHNob3QuanMnKSxcbiAgICAgIGRpc2NvdmVyeVJvb3Q6IGRpcmVjdG9yeSxcbiAgICB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IHNuYXBzaG90VGVzdFdvcmtlcih0ZXN0KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG9FcXVhbCgxKTtcbiAgfSk7XG5cbiAgdGVzdCgnZmFpbGVkIHNuYXBzaG90JywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBqZXN0LnNweU9uKGNoaWxkX3Byb2Nlc3MsICdzcGF3blN5bmMnKS5tb2NrUmVqZWN0ZWRWYWx1ZTtcbiAgICBjb25zdCB0ZXN0ID0ge1xuICAgICAgZmlsZU5hbWU6IHBhdGguam9pbihkaXJlY3RvcnksICd4eHh4eC50ZXN0LXdpdGgtc25hcHNob3QtYXNzZXRzLWRpZmYuanMnKSxcbiAgICAgIGRpc2NvdmVyeVJvb3Q6IGRpcmVjdG9yeSxcbiAgICAgIGRlc3RydWN0aXZlQ2hhbmdlczogW10sXG4gICAgfTtcbiAgICBjb25zdCByZXN1bHQgPSBzbmFwc2hvdFRlc3RXb3JrZXIodGVzdCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHJlc3VsdC5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgZXhwZWN0KHJlc3VsdFswXSkudG9FcXVhbCh0ZXN0KTtcbiAgfSk7XG59KTtcblxuIl19