"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockCdkProvider = void 0;
const stream_1 = require("stream");
const cdk_cli_wrapper_1 = require("@aws-cdk/cdk-cli-wrapper");
const runner_1 = require("../lib/runner");
class MockCdkProvider {
    constructor(options) {
        this.mocks = {};
        this.cdk = new cdk_cli_wrapper_1.CdkCliWrapper(options);
    }
    mockDeploy(mock) {
        this.mocks.deploy = mock !== null && mock !== void 0 ? mock : jest.fn().mockImplementation();
        this.cdk.deploy = this.mocks.deploy;
    }
    mockWatch(mock) {
        this.mocks.watch = mock !== null && mock !== void 0 ? mock : jest.fn().mockImplementation(jest.fn(() => {
            return {
                on: (_event, listener) => {
                    listener(0);
                },
                stdout: new stream_1.Readable({ read: jest.fn(() => { }) }),
                stderr: new stream_1.Readable({ read: jest.fn(() => { }) }),
                stdin: new stream_1.Writable({ write: jest.fn(() => { }), final: jest.fn(() => { }) }),
            };
        }));
        this.cdk.watch = this.mocks.watch;
    }
    mockSynth(mock) {
        this.mocks.synth = mock !== null && mock !== void 0 ? mock : jest.fn().mockImplementation();
        this.cdk.synth = this.mocks.synth;
    }
    mockSynthFast(mock) {
        this.mocks.synthFast = mock !== null && mock !== void 0 ? mock : jest.fn().mockImplementation();
        this.cdk.synthFast = this.mocks.synthFast;
    }
    mockDestroy(mock) {
        this.mocks.destroy = mock !== null && mock !== void 0 ? mock : jest.fn().mockImplementation();
        this.cdk.destroy = this.mocks.destroy;
    }
    mockList(mock) {
        this.mocks.list = mock !== null && mock !== void 0 ? mock : jest.fn().mockImplementation();
        this.cdk.list = this.mocks.list;
    }
    mockAll(mocks = {}) {
        this.mockDeploy(mocks.deploy);
        this.mockWatch(mocks.watch);
        this.mockSynth(mocks.synth);
        this.mockSynthFast(mocks.synthFast);
        this.mockDestroy(mocks.destroy);
        this.mockList(mocks.list);
        return this.mocks;
    }
    /**
     * Run a test of the testSnapshot method
     * @param integTestFile This name is used to determined the expected (committed) snapshot
     * @param actualSnapshot The directory of the snapshot that is used for of the actual (current) app
     * @returns Diagnostics as they would be returned by testSnapshot
     */
    snapshotTest(integTestFile, actualSnapshot) {
        // WHEN
        const integTest = new runner_1.IntegSnapshotRunner({
            cdk: this.cdk,
            test: new runner_1.IntegTest({
                fileName: 'test/test-data/' + integTestFile,
                discoveryRoot: 'test/test-data',
            }),
            integOutDir: actualSnapshot ? 'test/test-data/' + actualSnapshot : undefined,
        });
        integTest.actualTests();
        const results = integTest.testSnapshot();
        // THEN
        expect(this.mocks.synthFast).toHaveBeenCalledTimes(2);
        expect(this.mocks.synthFast).toHaveBeenCalledWith({
            env: expect.objectContaining({
                CDK_INTEG_ACCOUNT: '12345678',
                CDK_INTEG_REGION: 'test-region',
            }),
            execCmd: ['node', integTestFile],
            output: actualSnapshot !== null && actualSnapshot !== void 0 ? actualSnapshot : `cdk-integ.out.${integTestFile}.snapshot`,
        });
        return results;
    }
}
exports.MockCdkProvider = MockCdkProvider;
//# sourceMappingURL=data:application/json;base64,