"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const resource_pool_1 = require("../lib/resource-pool");
jest.setTimeout(30000);
const POOL_NAME = 'resource-pool.test';
test('take and dispose', async () => {
    const pool = resource_pool_1.ResourcePool.withResources(POOL_NAME, ['a']);
    const take1 = pool.take();
    let released = false;
    const lease1 = await take1;
    // We must start the take2 only after take1 has definitely
    // succeeded, otherwise we have a race condition if take2 happens to
    // win the race (we expect take1 to succeed and take2 to wait).
    const take2 = pool.take();
    // awaiting 'take2' would now block but we add an async
    // handler to it to flip a boolean to see when it gets activated.
    void (take2.then(() => released = true));
    expect(lease1.value).toEqual('a');
    await waitTick();
    expect(released).toEqual(false);
    await lease1.dispose();
    await waitTick(); // This works because setImmediate is scheduled in LIFO order
    const lease2 = await take2;
    await lease2.dispose();
    expect(released).toEqual(true);
});
test('double dispose throws', async () => {
    const pool = resource_pool_1.ResourcePool.withResources(POOL_NAME, ['a']);
    const lease = await pool.take();
    await lease.dispose();
    await expect(() => lease.dispose()).rejects.toThrow();
});
test('somewhat balance', async () => {
    const counters = {
        a: 0,
        b: 0,
        c: 0,
        d: 0,
        e: 0,
    };
    const N = 100;
    let maxConcurrency = 0;
    let concurrency = 0;
    const keys = Object.keys(counters);
    const pool = resource_pool_1.ResourcePool.withResources(POOL_NAME, keys);
    // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
    await Promise.all(Array.from(range(N)).map(() => pool.using(async (x) => {
        counters[x] += 1;
        concurrency += 1;
        maxConcurrency = Math.max(maxConcurrency, concurrency);
        try {
            await (0, lib_1.sleep)(10);
        }
        finally {
            concurrency -= 1;
        }
    })));
    // Regardless of which resource(s) we used, the total count should add up to N
    const sum = Object.values(counters).reduce((a, b) => a + b, 0);
    expect(sum).toEqual(N);
    // There was concurrency
    expect(maxConcurrency).toBeGreaterThan(2);
    // All counters are used
    for (const count of Object.values(counters)) {
        expect(count).toBeGreaterThan(0);
    }
});
function waitTick() {
    return new Promise(setImmediate);
}
function* range(n) {
    for (let i = 0; i < n; i++) {
        yield i;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtcG9vbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzb3VyY2UtcG9vbC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQStCO0FBQy9CLHdEQUFvRDtBQUVwRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQU0sQ0FBQyxDQUFDO0FBRXhCLE1BQU0sU0FBUyxHQUFHLG9CQUFvQixDQUFDO0FBRXZDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNsQyxNQUFNLElBQUksR0FBRyw0QkFBWSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUUxQixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFFckIsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUM7SUFFM0IsMERBQTBEO0lBQzFELG9FQUFvRTtJQUNwRSwrREFBK0Q7SUFDL0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRTFCLHVEQUF1RDtJQUN2RCxpRUFBaUU7SUFDakUsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsTUFBTSxRQUFRLEVBQUUsQ0FBQztJQUNqQixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWhDLE1BQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sUUFBUSxFQUFFLENBQUMsQ0FBQyw2REFBNkQ7SUFFL0UsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENB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QUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0IsTUFBTSxDQUFDLENBQUM7SUFDVixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IFJlc291cmNlUG9vbCB9IGZyb20gJy4uL2xpYi9yZXNvdXJjZS1wb29sJztcblxuamVzdC5zZXRUaW1lb3V0KDMwXzAwMCk7XG5cbmNvbnN0IFBPT0xfTkFNRSA9ICdyZXNvdXJjZS1wb29sLnRlc3QnO1xuXG50ZXN0KCd0YWtlIGFuZCBkaXNwb3NlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwb29sID0gUmVzb3VyY2VQb29sLndpdGhSZXNvdXJjZXMoUE9PTF9OQU1FLCBbJ2EnXSk7XG4gIGNvbnN0IHRha2UxID0gcG9vbC50YWtlKCk7XG5cbiAgbGV0IHJlbGVhc2VkID0gZmFsc2U7XG5cbiAgY29uc3QgbGVhc2UxID0gYXdhaXQgdGFrZTE7XG5cbiAgLy8gV2UgbXVzdCBzdGFydCB0aGUgdGFrZTIgb25seSBhZnRlciB0YWtlMSBoYXMgZGVmaW5pdGVseVxuICAvLyBzdWNjZWVkZWQsIG90aGVyd2lzZSB3ZSBoYXZlIGEgcmFjZSBjb25kaXRpb24gaWYgdGFrZTIgaGFwcGVucyB0b1xuICAvLyB3aW4gdGhlIHJhY2UgKHdlIGV4cGVjdCB0YWtlMSB0byBzdWNjZWVkIGFuZCB0YWtlMiB0byB3YWl0KS5cbiAgY29uc3QgdGFrZTIgPSBwb29sLnRha2UoKTtcblxuICAvLyBhd2FpdGluZyAndGFrZTInIHdvdWxkIG5vdyBibG9jayBidXQgd2UgYWRkIGFuIGFzeW5jXG4gIC8vIGhhbmRsZXIgdG8gaXQgdG8gZmxpcCBhIGJvb2xlYW4gdG8gc2VlIHdoZW4gaXQgZ2V0cyBhY3RpdmF0ZWQuXG4gIHZvaWQodGFrZTIudGhlbigoKSA9PiByZWxlYXNlZCA9IHRydWUpKTtcblxuICBleHBlY3QobGVhc2UxLnZhbHVlKS50b0VxdWFsKCdhJyk7XG4gIGF3YWl0IHdhaXRUaWNrKCk7XG4gIGV4cGVjdChyZWxlYXNlZCkudG9FcXVhbChmYWxzZSk7XG5cbiAgYXdhaXQgbGVhc2UxLmRpc3Bvc2UoKTtcbiAgYXdhaXQgd2FpdFRpY2soKTsgLy8gVGhpcyB3b3JrcyBiZWNhdXNlIHNldEltbWVkaWF0ZSBpcyBzY2hlZHVsZWQgaW4gTElGTyBvcmRlclxuXG4gIGNvbnN0IGxlYXNlMiA9IGF3YWl0IHRha2UyO1xuICBhd2FpdCBsZWFzZTIuZGlzcG9zZSgpO1xuICBleHBlY3QocmVsZWFzZWQpLnRvRXF1YWwodHJ1ZSk7XG59KTtcblxudGVzdCgnZG91YmxlIGRpc3Bvc2UgdGhyb3dzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwb29sID0gUmVzb3VyY2VQb29sLndpdGhSZXNvdXJjZXMoUE9PTF9OQU1FLCBbJ2EnXSk7XG4gIGNvbnN0IGxlYXNlID0gYXdhaXQgcG9vbC50YWtlKCk7XG5cbiAgYXdhaXQgbGVhc2UuZGlzcG9zZSgpO1xuICBhd2FpdCBleHBlY3QoKCkgPT4gbGVhc2UuZGlzcG9zZSgpKS5yZWplY3RzLnRvVGhyb3coKTtcbn0pO1xuXG50ZXN0KCdzb21ld2hhdCBiYWxhbmNlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjb3VudGVycyA9IHtcbiAgICBhOiAwLFxuICAgIGI6IDAsXG4gICAgYzogMCxcbiAgICBkOiAwLFxuICAgIGU6IDAsXG4gIH07XG4gIGNvbnN0IE4gPSAxMDA7XG4gIGxldCBtYXhDb25jdXJyZW5jeSA9IDA7XG4gIGxldCBjb25jdXJyZW5jeSA9IDA7XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvdW50ZXJzKSBhcyBBcnJheTxrZXlvZiB0eXBlb2YgY291bnRlcnM+IDtcbiAgY29uc3QgcG9vbCA9IFJlc291cmNlUG9vbC53aXRoUmVzb3VyY2VzKFBPT0xfTkFNRSwga2V5cyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAY2RrbGFicy9wcm9taXNlYWxsLW5vLXVuYm91bmRlZC1wYXJhbGxlbGlzbVxuICBhd2FpdCBQcm9taXNlLmFsbChBcnJheS5mcm9tKHJhbmdlKE4pKS5tYXAoKCkgPT5cbiAgICBwb29sLnVzaW5nKGFzeW5jICh4KSA9PiB7XG4gICAgICBjb3VudGVyc1t4XSArPSAxO1xuICAgICAgY29uY3VycmVuY3kgKz0gMTtcbiAgICAgIG1heENvbmN1cnJlbmN5ID0gTWF0aC5tYXgobWF4Q29uY3VycmVuY3ksIGNvbmN1cnJlbmN5KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEwKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGNvbmN1cnJlbmN5IC09IDE7XG4gICAgICB9XG4gICAgfSksXG4gICkpO1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hpY2ggcmVzb3VyY2Uocykgd2UgdXNlZCwgdGhlIHRvdGFsIGNvdW50IHNob3VsZCBhZGQgdXAgdG8gTlxuICBjb25zdCBzdW0gPSBPYmplY3QudmFsdWVzKGNvdW50ZXJzKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgZXhwZWN0KHN1bSkudG9FcXVhbChOKTtcbiAgLy8gVGhlcmUgd2FzIGNvbmN1cnJlbmN5XG4gIGV4cGVjdChtYXhDb25jdXJyZW5jeSkudG9CZUdyZWF0ZXJUaGFuKDIpO1xuICAvLyBBbGwgY291bnRlcnMgYXJlIHVzZWRcbiAgZm9yIChjb25zdCBjb3VudCBvZiBPYmplY3QudmFsdWVzKGNvdW50ZXJzKSkge1xuICAgIGV4cGVjdChjb3VudCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9XG59KTtcblxuZnVuY3Rpb24gd2FpdFRpY2soKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShzZXRJbW1lZGlhdGUpO1xufVxuXG5mdW5jdGlvbiogcmFuZ2UobjogbnVtYmVyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgeWllbGQgaTtcbiAgfVxufVxuIl19