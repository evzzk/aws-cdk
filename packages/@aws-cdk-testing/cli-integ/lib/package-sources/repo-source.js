"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepoPackageSource = exports.RepoPackageSourceSetup = void 0;
exports.findYarnPackages = findYarnPackages;
exports.autoFindRoot = autoFindRoot;
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const files_1 = require("../files");
const shell_1 = require("../shell");
class RepoPackageSourceSetup {
    constructor(repoRoot) {
        this.repoRoot = repoRoot;
        this.name = 'repo';
        this.description = `repo(${this.repoRoot})`;
    }
    async prepare() {
        if (!await fs.pathExists(path.join(this.repoRoot, 'package.json')) || !await fs.pathExists(path.join(this.repoRoot, 'yarn.lock'))) {
            throw new Error(`${this.repoRoot}: does not look like the repository root`);
        }
        process.env.REPO_ROOT = this.repoRoot;
        process.env.REPO_PACKAGE_MAP = await writePackageMap(this.repoRoot);
        (0, shell_1.addToShellPath)(path.resolve(__dirname, 'repo-tools'));
    }
    async cleanup() {
    }
}
exports.RepoPackageSourceSetup = RepoPackageSourceSetup;
class RepoPackageSource {
    constructor() {
        this.repoRoot = process.env.REPO_ROOT;
    }
    async makeCliAvailable() {
        (0, shell_1.addToShellPath)(path.join(this.repoRoot, 'packages', 'aws-cdk', 'bin'));
    }
    assertJsiiPackagesAvailable() {
        throw new Error('jsii client packages are not available when using REPO source');
    }
    async initializeDotnetPackages() {
    }
    majorVersion() {
        const releaseJson = fs.readJsonSync(path.resolve(this.repoRoot, 'release.json'));
        return releaseJson.majorVersion;
    }
    requestedCliVersion() {
        return '*';
    }
    requestedFrameworkVersion() {
        return '*';
    }
    requestedAlphaVersion() {
        return '*';
    }
}
exports.RepoPackageSource = RepoPackageSource;
async function writePackageMap(repoRoot) {
    const packages = await findYarnPackages(repoRoot);
    const fileName = path.join(os.tmpdir(), 'package-map.json');
    await fs.writeJson(fileName, packages);
    return fileName;
}
/**
 * Cache monorepo discovery results, we only want to do this once per run
 */
const YARN_MONOREPO_CACHE = {};
/**
  * Return a { name -> directory } packages found in a Yarn monorepo
  *
  * Cached in YARN_MONOREPO_CACHE.
  */
async function findYarnPackages(root) {
    if (!(root in YARN_MONOREPO_CACHE)) {
        const outputDataString = JSON.parse(await (0, shell_1.shell)(['yarn', 'workspaces', '--json', 'info'], {
            captureStderr: false,
            cwd: root,
            show: 'error',
        })).data;
        const output = JSON.parse(outputDataString);
        const ret = {};
        for (const [k, v] of Object.entries(output)) {
            ret[k] = path.join(root, v.location);
        }
        YARN_MONOREPO_CACHE[root] = ret;
    }
    return YARN_MONOREPO_CACHE[root];
}
/**
 * Find the root directory of the repo from the current directory
 */
async function autoFindRoot() {
    const found = (0, files_1.findUp)('release.json');
    if (!found) {
        throw new Error(`Could not determine repository root: 'release.json' not found from ${process.cwd()}`);
    }
    return path.dirname(found);
}
//# sourceMappingURL=data:application/json;base64,