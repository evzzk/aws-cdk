"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsClients = void 0;
exports.isStackMissingError = isStackMissingError;
exports.isBucketMissingError = isBucketMissingError;
exports.retry = retry;
exports.outputFromStack = outputFromStack;
exports.sleep = sleep;
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const client_ecr_1 = require("@aws-sdk/client-ecr");
const client_ecs_1 = require("@aws-sdk/client-ecs");
const client_iam_1 = require("@aws-sdk/client-iam");
const client_lambda_1 = require("@aws-sdk/client-lambda");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_sns_1 = require("@aws-sdk/client-sns");
const client_sso_1 = require("@aws-sdk/client-sso");
const client_sts_1 = require("@aws-sdk/client-sts");
const credential_providers_1 = require("@aws-sdk/credential-providers");
const util_retry_1 = require("@smithy/util-retry");
class AwsClients {
    static async default(output) {
        const region = process.env.AWS_REGION ?? process.env.AWS_DEFAULT_REGION ?? 'us-east-1';
        return AwsClients.forRegion(region, output);
    }
    static async forRegion(region, output) {
        return new AwsClients(region, output);
    }
    constructor(region, output) {
        this.region = region;
        this.output = output;
        this.config = {
            credentials: chainableCredentials(this.region),
            region: this.region,
            retryStrategy: new util_retry_1.ConfiguredRetryStrategy(9, (attempt) => attempt ** 500),
        };
        this.cloudFormation = new client_cloudformation_1.CloudFormationClient(this.config);
        this.s3 = new client_s3_1.S3Client(this.config);
        this.ecr = new client_ecr_1.ECRClient(this.config);
        this.ecs = new client_ecs_1.ECSClient(this.config);
        this.sso = new client_sso_1.SSOClient(this.config);
        this.sns = new client_sns_1.SNSClient(this.config);
        this.iam = new client_iam_1.IAMClient(this.config);
        this.lambda = new client_lambda_1.LambdaClient(this.config);
        this.sts = new client_sts_1.STSClient(this.config);
    }
    async account() {
        // Reduce # of retries, we use this as a circuit breaker for detecting no-config
        const stsClient = new client_sts_1.STSClient({
            credentials: this.config.credentials,
            region: this.config.region,
            maxAttempts: 2,
        });
        return (await stsClient.send(new client_sts_1.GetCallerIdentityCommand({}))).Account;
    }
    async deleteStacks(...stackNames) {
        if (stackNames.length === 0) {
            return;
        }
        // We purposely do all stacks serially, because they've been ordered
        // to do the bootstrap stack last.
        for (const stackName of stackNames) {
            await this.cloudFormation.send(new client_cloudformation_1.UpdateTerminationProtectionCommand({
                EnableTerminationProtection: false,
                StackName: stackName,
            }));
            await this.cloudFormation.send(new client_cloudformation_1.DeleteStackCommand({
                StackName: stackName,
            }));
            await retry(this.output, `Deleting ${stackName}`, retry.forSeconds(600), async () => {
                const status = await this.stackStatus(stackName);
                if (status !== undefined && status.endsWith('_FAILED')) {
                    throw retry.abort(new Error(`'${stackName}' is in state '${status}'`));
                }
                if (status !== undefined) {
                    throw new Error(`Delete of '${stackName}' not complete yet, status: '${status}'`);
                }
            });
        }
    }
    async stackStatus(stackName) {
        try {
            return (await this.cloudFormation.send(new client_cloudformation_1.DescribeStacksCommand({
                StackName: stackName,
            }))).Stacks?.[0].StackStatus;
        }
        catch (e) {
            if (isStackMissingError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async emptyBucket(bucketName, options) {
        const objects = await this.s3.send(new client_s3_1.ListObjectVersionsCommand({
            Bucket: bucketName,
        }));
        const deletes = [...(objects.Versions || []), ...(objects.DeleteMarkers || [])].reduce((acc, obj) => {
            if (typeof obj.VersionId !== 'undefined' && typeof obj.Key !== 'undefined') {
                acc.push({ Key: obj.Key, VersionId: obj.VersionId });
            }
            else if (typeof obj.Key !== 'undefined') {
                acc.push({ Key: obj.Key });
            }
            return acc;
        }, []);
        if (deletes.length === 0) {
            return Promise.resolve();
        }
        return this.s3.send(new client_s3_1.DeleteObjectsCommand({
            Bucket: bucketName,
            Delete: {
                Objects: deletes,
                Quiet: false,
            },
            BypassGovernanceRetention: options?.bypassGovernance ? true : undefined,
        }));
    }
    async deleteImageRepository(repositoryName) {
        await this.ecr.send(new client_ecr_1.DeleteRepositoryCommand({
            repositoryName: repositoryName,
            force: true,
        }));
    }
    async deleteBucket(bucketName) {
        try {
            await this.emptyBucket(bucketName);
            await this.s3.send(new client_s3_1.DeleteBucketCommand({
                Bucket: bucketName,
            }));
        }
        catch (e) {
            if (isBucketMissingError(e)) {
                return;
            }
            throw e;
        }
    }
}
exports.AwsClients = AwsClients;
function isStackMissingError(e) {
    return e.message.indexOf('does not exist') > -1;
}
function isBucketMissingError(e) {
    return e.message.indexOf('does not exist') > -1;
}
/**
 * Retry an async operation until a deadline is hit.
 *
 * Use `retry.forSeconds()` to construct a deadline relative to right now.
 *
 * Exceptions will cause the operation to retry. Use `retry.abort` to annotate an exception
 * to stop the retry and end in a failure.
 */
async function retry(output, operation, deadline, block) {
    let i = 0;
    output.write(`💈 ${operation}\n`);
    while (true) {
        try {
            i++;
            const ret = await block();
            output.write(`💈 ${operation}: succeeded after ${i} attempts\n`);
            return ret;
        }
        catch (e) {
            if (e.abort || Date.now() > deadline.getTime()) {
                throw new Error(`${operation}: did not succeed after ${i} attempts: ${e}`);
            }
            output.write(`⏳ ${operation} (${e.message})\n`);
            await sleep(5000);
        }
    }
}
/**
 * Make a deadline for the `retry` function relative to the current time.
 */
retry.forSeconds = (seconds) => {
    return new Date(Date.now() + seconds * 1000);
};
/**
 * Annotate an error to stop the retrying
 */
retry.abort = (e) => {
    e.abort = true;
    return e;
};
function outputFromStack(key, stack) {
    return (stack.Outputs ?? []).find((o) => o.OutputKey === key)?.OutputValue;
}
async function sleep(ms) {
    return new Promise((ok) => setTimeout(ok, ms));
}
function chainableCredentials(region) {
    if (process.env.CODEBUILD_BUILD_ARN && process.env.AWS_PROFILE) {
        // in codebuild we must assume the role that the cdk uses
        // otherwise credentials will just be picked up by the normal sdk
        // heuristics and expire after an hour.
        return (0, credential_providers_1.fromIni)({
            clientConfig: { region },
        });
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,