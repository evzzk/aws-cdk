"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShellHelper = void 0;
exports.shell = shell;
exports.rimraf = rimraf;
exports.addToShellPath = addToShellPath;
const child_process = require("child_process");
const fs = require("fs");
const path = require("path");
/**
 * A shell command that does what you want
 *
 * Is platform-aware, handles errors nicely.
 */
async function shell(command, options = {}) {
    if (options.modEnv && options.env) {
        throw new Error('Use either env or modEnv but not both');
    }
    const outputs = new Set(options.outputs);
    const writeToOutputs = (x) => {
        for (const outputStream of outputs) {
            outputStream.write(x);
        }
    };
    // Always output the command
    writeToOutputs(`ðŸ’» ${command.join(' ')}\n`);
    const show = options.show ?? 'always';
    if (process.env.VERBOSE) {
        outputs.add(process.stdout);
    }
    const env = options.env ?? (options.modEnv ? { ...process.env, ...options.modEnv } : process.env);
    const child = child_process.spawn(command[0], command.slice(1), {
        ...options,
        env,
        // Need this for Windows where we want .cmd and .bat to be found as well.
        shell: true,
        stdio: ['ignore', 'pipe', 'pipe'],
    });
    return new Promise((resolve, reject) => {
        const stdout = new Array();
        const stderr = new Array();
        child.stdout.on('data', chunk => {
            if (show === 'always') {
                writeToOutputs(chunk);
            }
            stdout.push(chunk);
        });
        child.stderr.on('data', chunk => {
            if (show === 'always') {
                writeToOutputs(chunk);
            }
            if (options.captureStderr ?? true) {
                stderr.push(chunk);
            }
        });
        child.once('error', reject);
        child.once('close', code => {
            const stderrOutput = Buffer.concat(stderr).toString('utf-8');
            const stdoutOutput = Buffer.concat(stdout).toString('utf-8');
            const out = (options.onlyStderr ? stderrOutput : stdoutOutput + stderrOutput).trim();
            if (code === 0 || options.allowErrExit) {
                resolve(out);
            }
            else {
                if (show === 'error') {
                    writeToOutputs(`${out}\n`);
                }
                reject(new Error(`'${command.join(' ')}' exited with error code ${code}.`));
            }
        });
    });
}
class ShellHelper {
    static fromContext(context) {
        return new ShellHelper(context.integTestDir, context.output);
    }
    constructor(_cwd, _output) {
        this._cwd = _cwd;
        this._output = _output;
    }
    async shell(command, options = {}) {
        return shell(command, {
            outputs: [this._output],
            cwd: this._cwd,
            ...options,
        });
    }
}
exports.ShellHelper = ShellHelper;
/**
 * rm -rf reimplementation, don't want to depend on an NPM package for this
 */
function rimraf(fsPath) {
    try {
        const isDir = fs.lstatSync(fsPath).isDirectory();
        if (isDir) {
            for (const file of fs.readdirSync(fsPath)) {
                rimraf(path.join(fsPath, file));
            }
            fs.rmdirSync(fsPath);
        }
        else {
            fs.unlinkSync(fsPath);
        }
    }
    catch (e) {
        // We will survive ENOENT
        if (e.code !== 'ENOENT') {
            throw e;
        }
    }
}
function addToShellPath(x) {
    const parts = process.env.PATH?.split(':') ?? [];
    if (!parts.includes(x)) {
        parts.unshift(x);
    }
    process.env.PATH = parts.join(':');
}
//# sourceMappingURL=data:application/json;base64,