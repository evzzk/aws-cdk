"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRepository = void 0;
const client_codeartifact_1 = require("@aws-sdk/client-codeartifact");
const aws_1 = require("../aws");
const COLLECT_BY_TAG = 'collect-by';
const REPO_LIFETIME_MS = 24 * 3600 * 1000; // One day
class TestRepository {
    static async newRandom() {
        const qualifier = Math.random()
            .toString(36)
            .replace(/[^a-z0-9]+/g, '');
        const repo = new TestRepository(`test-${qualifier}`);
        await repo.prepare();
        return repo;
    }
    static async newWithName(name) {
        const repo = new TestRepository(name);
        await repo.prepare();
        return repo;
    }
    static existing(repositoryName) {
        return new TestRepository(repositoryName);
    }
    /**
     * Garbage collect repositories
     */
    static async gc() {
        if (!(await TestRepository.existing('*dummy*').domainExists())) {
            return;
        }
        const codeArtifact = new client_codeartifact_1.CodeartifactClient();
        let nextToken;
        do {
            const page = await codeArtifact.send(new client_codeartifact_1.ListRepositoriesCommand({
                nextToken: nextToken,
            }));
            for (const repo of page.repositories ?? []) {
                const tags = await codeArtifact.send(new client_codeartifact_1.ListTagsForResourceCommand({
                    resourceArn: repo.arn,
                }));
                const collectable = tags?.tags?.find((t) => t.key === COLLECT_BY_TAG && Number(t.value) < Date.now());
                if (collectable) {
                    // eslint-disable-next-line no-console
                    console.log('Deleting', repo.name);
                    await codeArtifact.send(new client_codeartifact_1.DeleteRepositoryCommand({
                        domain: repo.domainName,
                        repository: repo.name,
                    }));
                }
            }
            nextToken = page.nextToken;
        } while (nextToken);
    }
    constructor(repositoryName) {
        this.repositoryName = repositoryName;
        this.npmUpstream = 'npm-upstream';
        this.pypiUpstream = 'pypi-upstream';
        this.nugetUpstream = 'nuget-upstream';
        this.mavenUpstream = 'maven-upstream';
        this.domain = TestRepository.DEFAULT_DOMAIN;
        this.codeArtifact = new client_codeartifact_1.CodeartifactClient();
    }
    async prepare() {
        await this.ensureDomain();
        await this.ensureUpstreams();
        await this.ensureRepository(this.repositoryName, {
            description: 'Testing repository',
            upstreams: [this.npmUpstream, this.pypiUpstream, this.nugetUpstream, this.mavenUpstream],
            tags: {
                [COLLECT_BY_TAG]: `${Date.now() + REPO_LIFETIME_MS}`,
            },
        });
    }
    async loginInformation() {
        if (this._loginInformation) {
            return this._loginInformation;
        }
        this._loginInformation = {
            authToken: (await this.codeArtifact.send(new client_codeartifact_1.GetAuthorizationTokenCommand({
                domain: this.domain,
                durationSeconds: 12 * 3600,
            }))).authorizationToken,
            repositoryName: this.repositoryName,
            npmEndpoint: (await this.codeArtifact.send(new client_codeartifact_1.GetRepositoryEndpointCommand({
                domain: this.domain,
                repository: this.repositoryName,
                format: 'npm',
            }))).repositoryEndpoint,
            mavenEndpoint: (await this.codeArtifact.send(new client_codeartifact_1.GetRepositoryEndpointCommand({
                domain: this.domain,
                repository: this.repositoryName,
                format: 'maven',
            }))).repositoryEndpoint,
            nugetEndpoint: (await this.codeArtifact.send(new client_codeartifact_1.GetRepositoryEndpointCommand({
                domain: this.domain,
                repository: this.repositoryName,
                format: 'nuget',
            }))).repositoryEndpoint,
            pypiEndpoint: (await this.codeArtifact.send(new client_codeartifact_1.GetRepositoryEndpointCommand({
                domain: this.domain,
                repository: this.repositoryName,
                format: 'pypi',
            }))).repositoryEndpoint,
        };
        return this._loginInformation;
    }
    async delete() {
        try {
            await this.codeArtifact.send(new client_codeartifact_1.DeleteRepositoryCommand({
                domain: this.domain,
                repository: this.repositoryName,
            }));
            // eslint-disable-next-line no-console
            console.log('Deleted', this.repositoryName);
        }
        catch (e) {
            if (e.name !== 'ResourceNotFoundException') {
                throw e;
            }
            // Okay
        }
    }
    /**
     * List all packages and mark them as "allow upstream versions".
     *
     * If we don't do this and we publish `foo@2.3.4-rc.0`, then we can't
     * download `foo@2.3.0` anymore because by default CodeArtifact will
     * block different versions from the same package.
     */
    async markAllUpstreamAllow() {
        for await (const pkg of this.listPackages({ upstream: 'BLOCK' })) {
            await retryThrottled(() => this.codeArtifact.send(new client_codeartifact_1.PutPackageOriginConfigurationCommand({
                domain: this.domain,
                repository: this.repositoryName,
                format: pkg.format,
                package: pkg.package,
                namespace: pkg.namespace,
                restrictions: {
                    publish: 'ALLOW',
                    upstream: 'ALLOW',
                },
            })));
        }
    }
    async ensureDomain() {
        if (await this.domainExists()) {
            return;
        }
        await this.codeArtifact.send(new client_codeartifact_1.CreateDomainCommand({
            domain: this.domain,
            tags: [{ key: 'testing', value: 'true' }],
        }));
    }
    async ensureUpstreams() {
        await this.ensureRepository(this.npmUpstream, {
            description: 'The upstream repository for NPM',
            external: 'public:npmjs',
        });
        await this.ensureRepository(this.mavenUpstream, {
            description: 'The upstream repository for Maven',
            external: 'public:maven-central',
        });
        await this.ensureRepository(this.nugetUpstream, {
            description: 'The upstream repository for NuGet',
            external: 'public:nuget-org',
        });
        await this.ensureRepository(this.pypiUpstream, {
            description: 'The upstream repository for PyPI',
            external: 'public:pypi',
        });
    }
    async ensureRepository(name, options) {
        if (await this.repositoryExists(name)) {
            return;
        }
        await this.codeArtifact.send(new client_codeartifact_1.CreateRepositoryCommand({
            domain: this.domain,
            repository: name,
            description: options?.description,
            upstreams: options?.upstreams?.map((repositoryName) => ({ repositoryName })),
            tags: options?.tags ? Object.entries(options.tags).map(([key, value]) => ({ key, value })) : undefined,
        }));
        if (options?.external) {
            const externalConnection = options.external;
            await retry(() => this.codeArtifact.send(new client_codeartifact_1.AssociateExternalConnectionCommand({
                domain: this.domain,
                repository: name,
                externalConnection,
            })));
        }
    }
    async domainExists() {
        try {
            await this.codeArtifact.send(new client_codeartifact_1.DescribeDomainCommand({ domain: this.domain }));
            return true;
        }
        catch (e) {
            if (e.name !== 'ResourceNotFoundException') {
                throw e;
            }
            return false;
        }
    }
    async repositoryExists(name) {
        try {
            await this.codeArtifact.send(new client_codeartifact_1.DescribeRepositoryCommand({ domain: this.domain, repository: name }));
            return true;
        }
        catch (e) {
            if (e.name !== 'ResourceNotFoundException') {
                throw e;
            }
            return false;
        }
    }
    async *listPackages(filter = {}) {
        let response = await retryThrottled(() => this.codeArtifact.send(new client_codeartifact_1.ListPackagesCommand({
            domain: this.domain,
            repository: this.repositoryName,
            ...filter,
        })));
        while (true) {
            for (const p of response.packages ?? []) {
                yield p;
            }
            if (!response.nextToken) {
                break;
            }
            response = await retryThrottled(() => this.codeArtifact.send(new client_codeartifact_1.ListPackagesCommand({
                domain: this.domain,
                repository: this.repositoryName,
                ...filter,
                nextToken: response.nextToken,
            })));
        }
    }
}
exports.TestRepository = TestRepository;
TestRepository.DEFAULT_DOMAIN = 'test-cdk';
async function retry(block) {
    let attempts = 3;
    while (true) {
        try {
            return await block();
        }
        catch (e) {
            if (attempts-- === 0) {
                throw e;
            }
            // eslint-disable-next-line no-console
            console.debug(e.message);
            await (0, aws_1.sleep)(500);
        }
    }
}
async function retryThrottled(block) {
    let time = 100;
    let attempts = 15;
    while (true) {
        try {
            return await block();
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.debug(e.message);
            if (e.name !== 'ThrottlingException') {
                throw e;
            }
            if (attempts-- === 0) {
                throw e;
            }
            await (0, aws_1.sleep)(Math.floor(Math.random() * time));
            time *= 2;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,